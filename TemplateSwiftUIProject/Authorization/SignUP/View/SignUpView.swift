//
//  SignUpView.swift
//  TemplateSwiftUIProject
//
//  Created by Evgenyi on 14.05.25.
//

// TextField magic
///https://habr.com/ru/articles/815685/
///https://github.com/C5FR7Q/x-text-field/blob/main/x-text-field/Playground/FocusHolderView.swift


//VStack "Password"
///–ü—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HStack, –≥–¥–µ –º—ã —Ä—è–¥–æ–º —Ä–∞–∑–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (–∏–ª–∏ SecureField) –∏ –∫–Ω–æ–ø–∫—É-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å, ‚Äî –ª–∏—à—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ZStack –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä .overlay, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ. –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫—É "eye" –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–≤–µ—Ä—Ö –ø–æ–ª—è –≤–≤–æ–¥–∞, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞.
/////–≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É eye –ø—Ä–æ–ø–∞–¥–∞–µ—Ç —Å TextField Password! –ú—ã –ø–æ–∫–∞ –æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é! —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã –µ—Å—Ç—å –≤ CustomSecureField.swift

//Intrinsic Content Size —É TextField –∏ SecureField –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∏–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã.

//keyboard
///–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ iOS/SwiftUI. –ö–æ–≥–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–¥–≤–∏–≥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TextField) –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤–∏–¥–∏–º—ã–º –∏ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—ã–º –∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π. –≠—Ç–æ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∏–¥–µ—Ç—å —Ç–æ, —á—Ç–æ –æ–Ω –≤–≤–æ–¥–∏—Ç, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω.
///–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é safe area –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä:
///.ignoresSafeArea(.keyboard, edges: .bottom)
///–ù–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ç–æ–º—É, —á—Ç–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –æ–∫–∞–∂–µ—Ç—Å—è —Å–∫—Ä—ã—Ç—ã–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
///Form + keyboard
///–ö–æ–≥–¥–∞ —Ç—ã —Ä–∞–∑–º–µ—â–∞–µ—à—å TextField –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Form, SwiftUI –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ scrollable –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ UIKit‚Äë—Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ scroll view), –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—Ç—É–ø—ã –∏ —Å–∫—Ä–æ–ª–ª–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–∫, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤–∏–¥–∏–º—ã–º, –±–µ–∑ —Ä–µ–∑–∫–æ–≥–æ "–ø–æ–¥—ä—ë–º–∞" –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
///–¢–æ –µ—Å—Ç—å, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤—ë—Ä—Å—Ç–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VStack (–≥–¥–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–¥–≤–∏–≥–∞–µ—Ç –≤–µ—Å—å view –Ω–∞–≤–µ—Ä—Ö), Form –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ ¬´—É–º–Ω–æ–µ¬ª –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–æ–ª–ª–∏—Ç –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤ –≤—Å–µ–π –≤—ë—Ä—Å—Ç–∫–∏.

//ScrollView(.vertical, showsIndicators: false) {..}.ignoresSafeArea(.keyboard)
/// –µ—Å–ª–∏ –º—ã –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫—É—é –∑–∞–ø–∏—Å—å —Ç–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ keyboard –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ—Å–∫—Ä–æ–ª–∏—Ç—å –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –ø–æ–¥ keyboard —Ç–æ –µ—Å—Ç—å –≤—Å–µ —á—Ç–æ –ø–æ–¥ keyboard –±—É–¥–µ—Ç –Ω–µ –≤–∏–¥–∏–º–æ –¥–ª—è –Ω–∞—Å!
/// –±–µ–∑ ignoresSafeArea(.keyboard) –º—ã –º–æ–∂–µ–º –ø—Ä–æ—Å–∫—Ä–æ–ª–∏—Ç—å –≤—Å–µ —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥ keyboard –∏ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –Ω–∞–¥ keyboard.

//side effects
///–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (side effects) –≤ iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚Äì —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –º–µ—Ç–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –µ—ë –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–±–æ—á–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –¥–µ–ª–∞–µ—Ç —á—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞; –æ–Ω–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∏–ª–∏ –≤–Ω–µ—à–Ω—é—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –æ–±–Ω–æ–≤–ª—è—Ç—å UI, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
///–ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ vs. —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–±–æ—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏: –ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π. –§—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–±–æ—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –¥–µ–ª–∞—é—Ç —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äì –∏–∑–º–µ–Ω—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–±—â–∞—é—Ç—Å—è —Å —Å–µ—Ç—å—é, –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É, –æ–±–Ω–æ–≤–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
///–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ: –í iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ SwiftUI, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º –∞—Å–ø–µ–∫—Ç–æ–º. –ö–æ–≥–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π @State –∏–ª–∏ @Published) –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–µ –≤ –æ–∂–∏–¥–∞–µ–º—ã–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´Publishing changes from within view updates is not allowed¬ª) –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ –æ–±–Ω–æ–≤–ª—è—Ç—å UI.
///–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: –•–æ—Ä–æ—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–Ω–æ—Å–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ .onAppear, .onChange –∏–ª–∏ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
///–í iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —è–≤–ª—è—é—Ç—Å—è –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º –º–∏—Ä–æ–º (UI, —Å–µ—Ç—å, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ) –≤—ã–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ì–ª–∞–≤–Ω–æ–µ ‚Äì —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ —Ä–∞–∑—É–º–Ω–æ: –æ—Ç–¥–µ–ª—è—Ç—å —á–∏—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∫–æ–¥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ SwiftUI, –≥–¥–µ –ø–æ—Ä—è–¥–æ–∫ –∏ –º–æ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

//Button.allowsHitTesting(false)
///–≠—Ç–æ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞ (–∏–ª–∏ ¬´—Ö–∏—Ç–∞¬ª) –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ, –Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç –µ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞.


// GeometryReader
///–ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –≤—ã—á–∏—Å–ª—è—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä View —Ç–æ –º–æ–∂–µ–º –ø–æ–º–µ—Å—Ç–∏—Ç—å GeometryReader –≤ –µ–≥–æ View.background
/// ScrollView.background { GeometryReader { geometry in Color.clear.onAppear{}.onChange{} .. } }

import SwiftUI
import UIKit

//// MARK: - –§–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
enum FieldToFocus: Hashable, CaseIterable {
    case emailField, securePasswordField, passwordField
}

// MARK: - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
struct SignUpView: View {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    @State private var isPasswordVisible = false
    @FocusState var isFieldFocus: FieldToFocus?
    
    @ObservedObject var viewModel: SignUpViewModel
    @EnvironmentObject var localization: LocalizationService
    @EnvironmentObject var accountCoordinator:AccountCoordinator
    @EnvironmentObject private var orientationService: DeviceOrientationService
    
    var body: some View {
        let _ = print("üîÑ SignUpView body update")
        let _ = Self._printChanges()
            ScrollView(.vertical, showsIndicators: false) {
                VStack(spacing: 20) {
                    // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    VStack(spacing: 15) {
                        // –ü–æ–ª–µ "Email"
                        VStack(alignment: .leading, spacing: 5) {
                            Text(Localized.SignUpView.email.localized())
                                .font(.subheadline)
                                .foregroundColor(AppColors.primary)
                            TextField(Localized.SignUpView.emailPlaceholder.localized(), text: $viewModel.email)
                                .submitLabel(.next)
                                .focused($isFieldFocus, equals: .emailField)
                                .onSubmit { focusNextField() }
                                .padding()
                                .background(Color.gray.opacity(0.1))
                                .cornerRadius(8)
                                .keyboardType(.emailAddress)
                                .disableAutocorrection(true)
                                .autocapitalization(.none)
                            // –ü—Ä–∏ —Ç–∞–ø–µ –æ—á–∏—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞
                                .onTapGesture {
                                    viewModel.emailError = nil
                                }
                            if let error = viewModel.emailError {
                                Text(error.localized())
                                    .font(.caption)
                                    .foregroundColor(.red)
                            }
                        }
                        
                        // –ü–æ–ª–µ "–ü–∞—Ä–æ–ª—å" —Å –∫–Ω–æ–ø–∫–æ–π-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º "eye"
                        VStack(alignment: .leading, spacing: 5) {
                            Text(Localized.SignUpView.password.localized())
                                .font(.subheadline)
                                .foregroundColor(AppColors.primary)
                            HStack {
                                Group {
                                    if isPasswordVisible {
                                        TextField(Localized.SignUpView.passwordPlaceholder.localized(), text: $viewModel.password)
                                            .submitLabel(.done)
                                            .focused($isFieldFocus, equals: .passwordField)
                                            .textContentType(.password)
                                            .autocapitalization(.none)
                                            .disableAutocorrection(true)
                                            .onSubmit { focusNextField() }
                                            .onChange(of: viewModel.password) { _ , _ in
                                                viewModel.updateValidationPassword()
                                            }
                                            .onTapGesture {
                                                viewModel.passwordError = nil
                                            }
                                    } else {
                                        SecureField(Localized.SignUpView.passwordPlaceholder.localized(), text: $viewModel.password)
                                            .submitLabel(.done)
                                            .focused($isFieldFocus, equals: .securePasswordField)
                                            .textContentType(.password)
                                            .autocapitalization(.none)
                                            .disableAutocorrection(true)
                                            .onSubmit { focusNextField() }
                                            .onChange(of: viewModel.password) { _ , _ in
                                                viewModel.updateValidationPassword()
                                            }
                                            .onTapGesture {
                                                viewModel.passwordError = nil
                                            }
                                    }
                                }
                                // –ö–Ω–æ–ø–∫–∞-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
                                Button(action: {
                                    isPasswordVisible.toggle()
                                    isFieldFocus = isPasswordVisible ? .passwordField : .securePasswordField
                                }) {
                                    Image(systemName: isPasswordVisible ? "eye.slash" : "eye")
                                        .foregroundColor(.gray)
                                }
                            }
                            .padding()
                            .background(Color.gray.opacity(0.1))
                            .cornerRadius(8)
                            if let error = viewModel.passwordError {
                                Text(error.localized())
                                    .font(.caption)
                                    .foregroundColor(.red)
                            }
                        }
                    }
                    .padding(.horizontal)
                    .padding(.top, 20)
                    
                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞)
                    Button(action: register) {
                        Group {
                            if viewModel.registeringState == .loading {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle())
                            } else {
                                Text(Localized.SignUpView.register.localized())
                            }
                        }
                        .frame(maxWidth: orientationService.orientation == .landscape  ? 300 : .infinity)
                        .contentShape(Rectangle())
                    }
                    .fontWeight(.semibold)
                    .padding()
                    .background(AppColors.activeColor)
                    .foregroundColor(AppColors.primary)
                    .cornerRadius(8)
                    .padding(.horizontal)
                    .disabled(viewModel.registeringState == .loading)
                    
                    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤—Ö–æ–¥–∞
                    HStack {
                        VStack { Divider().frame(height: 1).background(Color.primary) }
                        Text(Localized.SignUpView.or.localized())
                            .font(.footnote)
                            .foregroundColor(.primary)
                        VStack { Divider().frame(height: 1).background(Color.primary) }
                    }
                    .padding([.horizontal, .vertical])
                    
                    // –ë–ª–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    HStack(spacing: 40) {
                        // –ö–Ω–æ–ø–∫–∞ Apple
                        Button(action: {
                            guard viewModel.registeringState != .loading else { return }
                            print("applelogo")
                        })  {
                            Image(systemName: "applelogo")
                                .resizable()
                                .scaledToFit()
                                .padding()
                                .frame(width: 60, height: 60) // ‚Üê –ñ—ë—Å—Ç–∫–∏–π —Ä–∞–∑–º–µ—Ä
                                .tint(AppColors.primary)
                                .background(Circle().stroke(Color.gray, lineWidth: 1))
                        }
                        
                        // –ö–Ω–æ–ø–∫–∞ Google
                        Button(action: {
                            guard viewModel.registeringState != .loading else { return }
                            print("googlelogo")
                        }) {
                            Image("googlelogo")
                                .resizable()
                                .scaledToFit()
                                .padding()
                                .frame(width: 60, height: 60) // ‚Üê –ñ—ë—Å—Ç–∫–∏–π —Ä–∞–∑–º–µ—Ä
                                .background(Circle().stroke(Color.gray, lineWidth: 1))
                        }
                    }
                    .padding(.vertical, 10)
                    
                    
                    // –°—Å—ã–ª–∫–∞ –¥–ª—è SignIn
                    HStack {
                        Text(Localized.SignUpView.alreadyHaveAccount.localized())
                        Button(action: {
                            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
                            guard viewModel.registeringState != .loading else { return }
                            accountCoordinator.navigateTo(page: .login)
                        }) {
                            Text(Localized.SignUpView.signIn.localized())
                                .foregroundColor(.blue)
                                .fontWeight(.semibold)
                        }
                    }
                    .padding(.bottom, 20)
                }
                .navigationBarTitleDisplayMode(.inline)
                .navigationTitle(Localized.SignUpView.navigationTitle.localized())
            }
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∂–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏
            ///–ø–µ—Ä–≤—ã–º –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç simultaneousGesture –∑–∞—Ç–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            ///–ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ TextField —Å –æ—Ç–∫—Ä—ã—Ç–æ–π keyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∞ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            .simultaneousGesture(
                TapGesture().onEnded {
                    hideKeyboard()
                }
            )
            .onChange(of: viewModel.registeringState) { oldState, newState in
                switch newState {
                case .success:
                    print(".onChange success")
                    break
                case .failure:
                    print(".onChange failure")
                    break
                default:
                    break
                }
            }
    }
    
    private func focusNextField() {
        switch isFieldFocus {
        case .emailField:
            isFieldFocus = isPasswordVisible ? .passwordField : .securePasswordField
        case .securePasswordField, .passwordField:
            isFieldFocus = nil
        default:
            isFieldFocus = nil
        }
    }
    
    
    private func register() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        guard viewModel.registeringState != .loading else { return }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π
        viewModel.updateValidationEmail()
        viewModel.updateValidationPassword()
        
        
        if viewModel.isValid {
            print("–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            viewModel.signUp()
        } else {
            print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.")
        }
    }
}


//

//            viewModel.isRegistering = true
//            // –°–∏–º—É–ª—è—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω—ë–Ω —Ä–µ–∞–ª—å–Ω—ã–º API-–≤—ã–∑–æ–≤–æ–º
//            viewModel.registerUser { success in
//                // –í—ã–∫–ª—é—á–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                DispatchQueue.main.async {
//                    viewModel.isRegistering = false
//                }
//            }


// MARK: - before DI AuthorizationManager in ViewBuilderService

//import SwiftUI
//import UIKit
//
// //MARK: - –§–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
//enum FieldToFocus: Hashable, CaseIterable {
//    case emailField, securePasswordField, passwordField
//}
//
//// MARK: - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//struct SignUpView: View {
//    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
//    @State private var isPasswordVisible = false
//    @FocusState var isFieldFocus: FieldToFocus?
//    
//    @StateObject private var viewModel = SignUpViewModel()
//    @EnvironmentObject var localization: LocalizationService
//    @EnvironmentObject var accountCoordinator:AccountCoordinator
//    @EnvironmentObject private var orientationService: DeviceOrientationService
//    
//    var body: some View {
// 
//            ScrollView(.vertical, showsIndicators: false) {
//                VStack(spacing: 20) {
//                    // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                    VStack(spacing: 15) {
//                        // –ü–æ–ª–µ "Email"
//                        VStack(alignment: .leading, spacing: 5) {
//                            Text(Localized.SignUpView.email.localized())
//                                .font(.subheadline)
//                                .foregroundColor(AppColors.primary)
//                            TextField(Localized.SignUpView.emailPlaceholder.localized(), text: $viewModel.email)
//                                .submitLabel(.next)
//                                .focused($isFieldFocus, equals: .emailField)
//                                .onSubmit { focusNextField() }
//                                .padding()
//                                .background(Color.gray.opacity(0.1))
//                                .cornerRadius(8)
//                                .keyboardType(.emailAddress)
//                                .disableAutocorrection(true)
//                                .autocapitalization(.none)
//                            // –ü—Ä–∏ —Ç–∞–ø–µ –æ—á–∏—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞
//                                .onTapGesture {
//                                    viewModel.emailError = nil
//                                }
//                            if let error = viewModel.emailError {
//                                Text(error.localized())
//                                    .font(.caption)
//                                    .foregroundColor(.red)
//                            }
//                        }
//                        
//                        // –ü–æ–ª–µ "–ü–∞—Ä–æ–ª—å" —Å –∫–Ω–æ–ø–∫–æ–π-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º "eye"
//                        VStack(alignment: .leading, spacing: 5) {
//                            Text(Localized.SignUpView.password.localized())
//                                .font(.subheadline)
//                                .foregroundColor(AppColors.primary)
//                            HStack {
//                                Group {
//                                    if isPasswordVisible {
//                                        TextField(Localized.SignUpView.passwordPlaceholder.localized(), text: $viewModel.password)
//                                            .submitLabel(.done)
//                                            .focused($isFieldFocus, equals: .passwordField)
//                                            .textContentType(.password)
//                                            .autocapitalization(.none)
//                                            .disableAutocorrection(true)
//                                            .onSubmit { focusNextField() }
//                                            .onChange(of: viewModel.password) { _ , _ in
//                                                viewModel.updateValidationPassword()
//                                            }
//                                            .onTapGesture {
//                                                viewModel.passwordError = nil
//                                            }
//                                    } else {
//                                        SecureField(Localized.SignUpView.passwordPlaceholder.localized(), text: $viewModel.password)
//                                            .submitLabel(.done)
//                                            .focused($isFieldFocus, equals: .securePasswordField)
//                                            .textContentType(.password)
//                                            .autocapitalization(.none)
//                                            .disableAutocorrection(true)
//                                            .onSubmit { focusNextField() }
//                                            .onChange(of: viewModel.password) { _ , _ in
//                                                viewModel.updateValidationPassword()
//                                            }
//                                            .onTapGesture {
//                                                viewModel.passwordError = nil
//                                            }
//                                    }
//                                }
//                                // –ö–Ω–æ–ø–∫–∞-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
//                                Button(action: {
//                                    isPasswordVisible.toggle()
//                                    isFieldFocus = isPasswordVisible ? .passwordField : .securePasswordField
//                                }) {
//                                    Image(systemName: isPasswordVisible ? "eye.slash" : "eye")
//                                        .foregroundColor(.gray)
//                                }
//                            }
//                            .padding()
//                            .background(Color.gray.opacity(0.1))
//                            .cornerRadius(8)
//                            if let error = viewModel.passwordError {
//                                Text(error.localized())
//                                    .font(.caption)
//                                    .foregroundColor(.red)
//                            }
//                        }
//                    }
//                    .padding(.horizontal)
//                    .padding(.top, 20)
//                    
//                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞)
//                    Button(action: register) {
//                        Group {
//                            if viewModel.isRegistering {
//                                ProgressView()
//                                    .progressViewStyle(CircularProgressViewStyle())
//                            } else {
//                                Text(Localized.SignUpView.register.localized())
//                            }
//                        }
//                        .frame(maxWidth: orientationService.orientation == .landscape  ? 300 : .infinity)
//                        .contentShape(Rectangle())
//                    }
//                    .fontWeight(.semibold)
//                    .padding()
//                    .background(AppColors.activeColor)
//                    .foregroundColor(AppColors.primary)
//                    .cornerRadius(8)
//                    .padding(.horizontal)
//                    .disabled(viewModel.isRegistering)
//                    
//                    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤—Ö–æ–¥–∞
//                    HStack {
//                        VStack { Divider().frame(height: 1).background(Color.primary) }
//                        Text(Localized.SignUpView.or.localized())
//                            .font(.footnote)
//                            .foregroundColor(.primary)
//                        VStack { Divider().frame(height: 1).background(Color.primary) }
//                    }
//                    .padding([.horizontal, .vertical])
//                    
//                    // –ë–ª–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                    HStack(spacing: 40) {
//                        // –ö–Ω–æ–ø–∫–∞ Apple
//                        Button(action: {
//                            guard !viewModel.isRegistering else { return }
//                            print("applelogo")
//                        })  {
//                            Image(systemName: "applelogo")
//                                .resizable()
//                                .scaledToFit()
//                                .padding()
//                                .frame(width: 60, height: 60) // ‚Üê –ñ—ë—Å—Ç–∫–∏–π —Ä–∞–∑–º–µ—Ä
//                                .tint(AppColors.primary)
//                                .background(Circle().stroke(Color.gray, lineWidth: 1))
//                        }
//                        
//                        // –ö–Ω–æ–ø–∫–∞ Google
//                        Button(action: {
//                            guard !viewModel.isRegistering else { return }
//                            print("googlelogo")
//                        }) {
//                            Image("googlelogo")
//                                .resizable()
//                                .scaledToFit()
//                                .padding()
//                                .frame(width: 60, height: 60) // ‚Üê –ñ—ë—Å—Ç–∫–∏–π —Ä–∞–∑–º–µ—Ä
//                                .background(Circle().stroke(Color.gray, lineWidth: 1))
//                        }
//                    }
//                    .padding(.vertical, 10)
//                    
//                    
//                    // –°—Å—ã–ª–∫–∞ –¥–ª—è SignIn
//                    HStack {
//                        Text(Localized.SignUpView.alreadyHaveAccount.localized())
//                        Button(action: {
//                            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
//                            guard !viewModel.isRegistering else { return }
//                            accountCoordinator.navigateTo(page: .login)
//                        }) {
//                            Text(Localized.SignUpView.signIn.localized())
//                                .foregroundColor(.blue)
//                                .fontWeight(.semibold)
//                        }
//                    }
//                    .padding(.bottom, 20)
//                }
//                .navigationBarTitleDisplayMode(.inline)
//                .navigationTitle(Localized.SignUpView.navigationTitle.localized())
//            }
//            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∂–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏
//            ///–ø–µ—Ä–≤—ã–º –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç simultaneousGesture –∑–∞—Ç–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
//            ///–ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ TextField —Å –æ—Ç–∫—Ä—ã—Ç–æ–π keyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∞ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
//            .simultaneousGesture(
//                TapGesture().onEnded {
//                    hideKeyboard()
//                }
//            )
//    }
//    
//    private func focusNextField() {
//        switch isFieldFocus {
//        case .emailField:
//            isFieldFocus = isPasswordVisible ? .passwordField : .securePasswordField
//        case .securePasswordField, .passwordField:
//            isFieldFocus = nil
//        default:
//            isFieldFocus = nil
//        }
//    }
//    
//    
//    private func register() {
//        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
//        guard !viewModel.isRegistering else { return }
//        
//        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π
//        viewModel.updateValidationEmail()
//        viewModel.updateValidationPassword()
//        
//        if viewModel.isValid {
//            viewModel.isRegistering = true
//            print("–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
//            
//            // –°–∏–º—É–ª—è—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω—ë–Ω —Ä–µ–∞–ª—å–Ω—ã–º API-–≤—ã–∑–æ–≤–æ–º
//            viewModel.registerUser { success in
//                // –í—ã–∫–ª—é—á–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                DispatchQueue.main.async {
//                    viewModel.isRegistering = false
//                }
//            }
//        } else {
//            print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.")
//        }
//    }
//}



// MARK: - Version alternative autentification

// zero version
/// –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π - –µ—Å–ª–∏ —É –Ω–∞—Å —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—å—à–µ 160pt(60 + 40 + 60) —Ç–æ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç —É–∂–∏–º–∞—Ç—å—Å—è
/// –Ω–æ —É –Ω–∞—Å –î–∞–∂–µ iPhone SE (3rd) –∏–º–µ–µ—Ç —à–∏—Ä–∏–Ω—É 375pt ‚Üí 160pt < 375pt
/// —Ç–æ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∏–∑–±—ã—Ç–æ—á–µ–Ω

//HStack(spacing: 40) {
//    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Apple
//    Button(action: {
//        guard !viewModel.isRegistering else { return }
//        print("applelogo")
//    }) {
//        Image(systemName: "applelogo")
//            .resizable()
//            .scaledToFit()
//            .padding()
//            .frame(maxWidth: .infinity, maxHeight: .infinity)
//            .aspectRatio(1, contentMode: .fit)
//            .background(
//                Circle()
//                    .stroke(Color.gray, lineWidth: 1)
//            )
//            .tint(AppColors.primary)
//    }
//    .frame(maxWidth: 60, maxHeight: 60)
//    .aspectRatio(1, contentMode: .fit)
//    .background(
//           GeometryReader { geometry in
//               Color.clear
//                   .onAppear {
//                       print("Apple Button size: \(geometry.size)")
//                   }
//                   .onChange(of: geometry.size) { _, newSize in
//                       print("Apple Button new size: \(newSize)")
//                   }
//           }
//       )
//    
//    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
//    Button(action: {
//        guard !viewModel.isRegistering else { return }
//        print("googlelogo")
//    }) {
//        Image("googlelogo")
//            .resizable()
//            .scaledToFit()
//            .padding()
//            .frame(maxWidth: .infinity, maxHeight: .infinity)
//            .aspectRatio(1, contentMode: .fit)
//            .background(
//                Circle()
//                    .stroke(Color.gray, lineWidth: 1)
//            )
//    }
//    .frame(maxWidth: 60, maxHeight: 60)
//    .aspectRatio(1, contentMode: .fit)
//    .background(
//         GeometryReader { geometry in
//             Color.clear
//                 .onAppear {
//                     print("Google Button size: \(geometry.size)")
//                 }
//                 .onChange(of: geometry.size) { _, newSize in
//                     print("Google Button new size: \(newSize)")
//                 }
//         }
//     )
//}
//.frame(maxWidth: .infinity)
//.padding(.vertical, 10)


// first verssion
///–ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º —á—Ç–æ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∂–µ—Å—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å frame –¥–ª—è GeometryReader
///–≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GeometryReader –≤–Ω—É—Ç—Ä–∏ ScrollView ‚Äî –Ω–µ –ª—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.

//                    GeometryReader { geometry in
//                        HStack(spacing: 40) {
//                            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Apple
//                            Button(action: {
//                                // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Apple
//                                guard !viewModel.isRegistering else { return }
//                                print("applelogo")
//                            }) {
//                                Image(systemName: "applelogo")
//                                    .resizable()
//                                    .scaledToFit()
//                                //                            UIScreen.main.bounds.width * 0.08
//                                    .frame(width: geometry.size.width * 0.08,
//                                           height: geometry.size.width * 0.08)
//                                    .padding()
//                                    .tint(AppColors.primary)
//                                    .clipShape(Circle())
//                                    .overlay(Circle().stroke(Color.gray, lineWidth: 1))
//                            }
//
//                            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
//                            Button(action: {
//                                // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google
//                                guard !viewModel.isRegistering else { return }
//                                print("googlelogo")
//                            }) {
//                                Image("googlelogo")
//                                    .resizable()
//                                    .scaledToFit()
//                                    .frame(width: geometry.size.width * 0.08,
//                                           height: geometry.size.width * 0.08)
//                                    .padding()
//                                    .clipShape(Circle())
//                                    .overlay(Circle().stroke(Color.gray, lineWidth: 1))
//                            }
//                        }
//                        .frame(width: geometry.size.width, height: geometry.size.height, alignment: .center)
//                        .padding(.vertical, 10)
//                    }
//                    .frame(height: 100)
//                    .background(Color.green)

//second version
// –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ state —Ä–∞–∑–º–µ—Ä —Ä–µ–∑–∫–æ –º–µ–Ω—è–ª—Å—è –¥–æ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤

//HStack(spacing: 40) {
//    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Apple
//    Button(action: {
//        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Apple
//        guard !viewModel.isSignIn else { return }
//        print("applelogo")
//    }) {
//        Image(systemName: "applelogo")
//            .resizable()
//            .scaledToFit()
//            .frame(width: UIScreen.main.bounds.width * 0.08,
//                   height: UIScreen.main.bounds.width * 0.08)
//            .padding()
//            .tint(AppColors.primary)
//            .clipShape(Circle())
//            .overlay(Circle().stroke(Color.gray, lineWidth: 1))
//    }
//    
//    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
//    Button(action: {
//        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google
//        guard !viewModel.isSignIn else { return }
//        print("googlelogo")
//    }) {
//        Image("googlelogo")
//            .resizable()
//            .scaledToFit()
//            .frame(width: UIScreen.main.bounds.width * 0.08,
//                   height: UIScreen.main.bounds.width * 0.08)
//            .padding()
//            .clipShape(Circle())
//            .overlay(Circle().stroke(Color.gray, lineWidth: 1))
//    }
//}
//.padding(.vertical, 10)



// MARK: - first version Validation
//import SwiftUI
//
//enum FieldToFocus: Hashable , CaseIterable {
//    case emailField, securePasswordField, passwordField
//}
//
//struct CreateAccountView: View {
//
//    // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
//    @State private var isPasswordVisible: Bool = false
//    @FocusState var isFieldFocus: FieldToFocus?
//
//    @StateObject private var viewModel = CreateAccountViewModel()
//
//    var body: some View {
//        ScrollView(.vertical, showsIndicators: false) {
//            VStack(spacing: 20) {
//                // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –º–µ—Ç–∫–∞–º–∏
//                VStack(spacing: 15) {
//                    // –ü–æ–ª–µ "Email"
//                    VStack(alignment: .leading, spacing: 5) {
//                        Text("Email")
//                            .font(.subheadline)
//                            .foregroundColor(AppColors.primary)
//                        TextField("–í–≤–µ–¥–∏—Ç–µ email", text: $viewModel.email)
//                            .submitLabel(.next)
//                            .focused($isFieldFocus, equals: .emailField)
//                            .onSubmit {
//                                focusNextField()
//                            }
//                            .padding()
//                            .background(Color.gray.opacity(0.1))
//                            .cornerRadius(8)
//                            .keyboardType(.emailAddress)
//                            .autocapitalization(.none)
//                            .onChange(of: viewModel.email) { _ , _ in
//                                viewModel.updateValidationEmail()
//                            }
//                        if let error = viewModel.emailError {
//                            Text(error)
//                                .font(.caption)
//                                .foregroundColor(.red)
//                        }
//                    }
//
//                    // –ü–æ–ª–µ "–ü–∞—Ä–æ–ª—å" —Å –∫–Ω–æ–ø–∫–æ–π "eye" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
//                    VStack(alignment: .leading, spacing: 5) {
//                        Text("–ü–∞—Ä–æ–ª—å")
//                            .font(.subheadline)
//                            .foregroundColor(AppColors.primary)
//                        HStack {
//                            Group {
//                                if isPasswordVisible {
//                                    TextField("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", text: $viewModel.password)
//                                        .submitLabel(.done)
//                                        .focused($isFieldFocus, equals: .passwordField)
//                                        .textContentType(.password)
//                                        .onSubmit {
//                                            focusNextField()
//                                        }
//                                        .onChange(of: viewModel.password) { _ , _ in
//                                            viewModel.updateValidationPassword()
//                                        }
//                                } else {
//                                    SecureField("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", text: $viewModel.password)
//                                        .submitLabel(.done)
//                                        .focused($isFieldFocus, equals: .securePasswordField)
//                                        .textContentType(.password)
//                                        .onSubmit {
//                                            focusNextField()
//                                        }
//                                        .onChange(of: viewModel.password) { _ , _ in
//                                            viewModel.updateValidationPassword()
//                                        }
//                                }
//                            }
//                            // –ö–Ω–æ–ø–∫–∞-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
//                            Button(action: {
//                                isPasswordVisible.toggle()
//                                isFieldFocus = isPasswordVisible ? .passwordField : .securePasswordField
//                            }) {
//                                Image(systemName: isPasswordVisible ? "eye.slash" : "eye")
//                                    .foregroundColor(.gray)
//                            }
//                        }
//                        .padding()
//                        .background(Color.gray.opacity(0.1))
//                        .cornerRadius(8)
//                        if let error = viewModel.passwordError {
//                            Text(error)
//                                .font(.caption)
//                                .foregroundColor(.red)
//                        }
//                    }  // End of password field
//                }
//                .padding(.horizontal)
//                .padding(.top, 20)
//
//                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                Button(action: {
//                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//                }, label: {
//                    Text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
//                        .fontWeight(.semibold)
//                        .frame(maxWidth: .infinity)
//                        .padding()
//                        .background(AppColors.activeColor)
//                        .foregroundColor(AppColors.primary)
//                        .cornerRadius(8)
//                })
//                .padding(.horizontal)
//                //                .disabled(!viewModel.isValid)
//
//                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤—Ö–æ–¥–∞
//                HStack {
//                    VStack { Divider().frame(height: 1).background(Color.primary) }
//                    Text("–ò–õ–ò")
//                        .font(.footnote)
//                        .foregroundColor(.primary)
//                    VStack { Divider().frame(height: 1).background(Color.primary) }
//                }
//                .padding([.horizontal, .vertical])
//
//                // –ë–ª–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                HStack(spacing: 40) {
//                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Apple
//                    Button(action: {
//                        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Apple
//                    }) {
//                        Image(systemName: "applelogo")
//                            .resizable()
//                            .scaledToFit()
//                            .frame(width: UIScreen.main.bounds.width * 0.08, height: UIScreen.main.bounds.width * 0.08)
//                            .padding()
//                            .tint(AppColors.primary)
//                            .clipShape(Circle())
//                            .overlay(Circle().stroke(Color.gray, lineWidth: 1))
//                    }
//
//                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
//                    Button(action: {
//                        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google
//                    }) {
//                        Image("googlelogo")
//                            .resizable()
//                            .scaledToFit()
//                            .frame(width: UIScreen.main.bounds.width * 0.08, height: UIScreen.main.bounds.width * 0.08)
//                            .padding()
//                            .clipShape(Circle())
//                            .overlay(Circle().stroke(Color.gray, lineWidth: 1))
//                    }
//                }
//                .padding(.vertical, 10)
//
//                // –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞
//                HStack {
//                    Text("–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?")
//                    Button(action: {
//                        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
//                    }) {
//                        Text("–í–æ–π—Ç–∏")
//                            .foregroundColor(.blue)
//                            .fontWeight(.semibold)
//                    }
//                }
//                .padding(.bottom, 20)
//            }
//            .navigationBarTitleDisplayMode(.inline)
//            .navigationTitle("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
//        }
//    }
//
//    private func focusNextField() {
//        switch isFieldFocus {
//        case .emailField:
//            isFieldFocus = isPasswordVisible ? .passwordField : .securePasswordField
//        case .securePasswordField, .passwordField:
//            isFieldFocus = nil
//        default:
//            isFieldFocus = nil
//        }
//    }
//}
//
//class CreateAccountViewModel: ObservableObject {
//    @Published var email: String = ""
//    @Published var password: String = ""
//
//    @Published var emailError: String?
//    @Published var passwordError: String?
//
//    // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –±–µ–∑ side‚Äë—ç—Ñ—Ñ–µ–∫—Ç–æ–≤:
//    var isValid: Bool {
//        email.isValidEmail && (password.validatePassword() == ValidationResult.success)
//    }
//
//    func updateValidationEmail() {
//        emailError = email.isValidEmail ? nil : "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã."
//    }
//
//    func updateValidationPassword() {
//        switch password.validatePassword() {
//        case .failure(let message):
//            passwordError = message
//        case .success:
//            passwordError = nil
//        }
//    }
//}
//
//
//// Validation
//enum ValidationResult: Equatable {
//    case success
//    case failure(String)
//}
//
//
//extension String {
//    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ email —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
////    var isValidEmail: Bool {
////        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
////        // –†–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è email –º–æ–≥—É—Ç –±—ã—Ç—å –≤–µ—Å—å–º–∞ —Å–ª–æ–∂–Ω—ã–º–∏; –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.
////        let emailRegex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}"
////        return NSPredicate(format:"SELF MATCHES %@", emailRegex).evaluate(with: self)
////    }
//
//    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ email —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NSDataDetector
//        var isValidEmail: Bool {
//            let detector = try? NSDataDetector(types: NSTextCheckingResult.CheckingType.link.rawValue)
//            let range = NSRange(location: 0, length: self.utf16.count)
//            let matches = detector?.matches(in: self, options: [], range: range) ?? []
//            return matches.count == 1 && matches.first?.url?.scheme == "mailto"
//        }
//
//
//    func validatePassword() -> ValidationResult {
//        if self.count < 8 {
//            return .failure("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.")
//        }
//        if self.rangeOfCharacter(from: .decimalDigits) == nil {
//            return .failure("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.")
//        }
//        if self.rangeOfCharacter(from: .lowercaseLetters) == nil {
//            return .failure("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É.")
//        }
//        if self.rangeOfCharacter(from: .uppercaseLetters) == nil {
//            return .failure("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É.")
//        }
//        return .success
//    }
//}


//    func isValidEmail(_ email: String) -> Bool {
//        let detector = try? NSDataDetector(types: NSTextCheckingResult.CheckingType.link.rawValue)
//        let range = NSRange(location: 0, length: email.utf16.count)
//        let matches = detector?.matches(in: email, options: [], range: range) ?? []
//        return matches.count == 1 && matches.first?.url?.scheme == "mailto"
//    }

//    // –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ onChange
//        func updateValidationErrors() {
//            emailError = email.isValidEmail ? nil : "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã."
//
//            switch password.validatePassword() {
//            case .failure(let message):
//                passwordError = message
//            case .success:
//                passwordError = nil
//            }
//        }
    
//    func validateFields() -> Bool {
//        // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
//        if !email.isValidEmail {
//            emailError = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã."
//        } else {
//            emailError = nil
//        }
//
//        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
//        switch password.validatePassword() {
//        case .failure(let message):
//            passwordError = message
//        case .success:
//            passwordError = nil
//        }
//
//        return emailError == nil && passwordError == nil
//    }


// MARK: - Sistem Warning

///–ò—Ç–∞–∫, –ø–æ–¥—ã—Ç–æ–∂–∏–º: –≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã iOS –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –Ω–∞–ø—Ä—è–º—É—é. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç—ã —Ñ–æ—Ä–º—ã, –º–æ–∂–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ –∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ input assistant –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∏–¥—è—Ç –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—é—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.

//Unable to simultaneously satisfy constraints.
//    Probably at least one of the constraints in the following list is one you don't want.
//    Try this:
//        (1) look at each constraint and try to figure out which you don't expect;
//        (2) find the code that added the unwanted constraint or constraints and fix it.
//(
//    "<NSLayoutConstraint:0x6000021ed310 'accessoryView.bottom' _UIRemoteKeyboardPlaceholderView:0x104399940.bottom == _UIKBCompatInputView:0x1047209e0.top   (active)>",
//    "<NSLayoutConstraint:0x6000021e8ff0 'assistantHeight' SystemInputAssistantView.height == 45   (active, names: SystemInputAssistantView:0x1045b34d0 )>",
//    "<NSLayoutConstraint:0x6000021f07d0 'assistantView.bottom' SystemInputAssistantView.bottom == _UIKBCompatInputView:0x1047209e0.top   (active, names: SystemInputAssistantView:0x1045b34d0 )>",
//    "<NSLayoutConstraint:0x6000021f0780 'assistantView.top' V:[_UIRemoteKeyboardPlaceholderView:0x104399940]-(0)-[SystemInputAssistantView]   (active, names: SystemInputAssistantView:0x1045b34d0 )>"
//)
//
//Will attempt to recover by breaking constraint
//<NSLayoutConstraint:0x6000021f0780 'assistantView.top' V:[_UIRemoteKeyboardPlaceholderView:0x104399940]-(0)-[SystemInputAssistantView]   (active, names: SystemInputAssistantView:0x1045b34d0 )>
//
//Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.
//The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in <UIKitCore/UIView.h> may also be helpful.





// MARK: - Three textField

//import SwiftUI
//
//enum FieldToFocus: Hashable , CaseIterable {
//    case nameField, emailField, securePasswordField, passwordField
//}
//
//struct CreateAccountView: View {
//    @State private var username: String = ""
//    @State private var email: String = ""
//    @State private var password: String = ""
//    // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
//    @State private var isPasswordVisible: Bool = false
//    @FocusState var isFieldFocus: FieldToFocus?
//    
//    var body: some View {
//        ScrollView(.vertical, showsIndicators: false) {
//            VStack(spacing: 20) {
//                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–∫—Ä–∞–Ω–∞
////                Text("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
////                    .font(.largeTitle)
////                    .fontWeight(.bold)
////                    .padding(.top, 20)
//                
//                // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –º–µ—Ç–∫–∞–º–∏
//                VStack(spacing: 15) {
//                    // –ü–æ–ª–µ "–ò–º—è"
//                    VStack(alignment: .leading, spacing: 5) {
//                        Text("–ò–º—è")
//                            .font(.subheadline)
//                            .foregroundColor(AppColors.primary)
//                        TextField("–í–≤–µ–¥–∏—Ç–µ –∏–º—è", text: $username)
//                            .submitLabel(.next)
//                            .focused($isFieldFocus, equals: .nameField)
//                            .onSubmit { focusNextField() }
//                            .padding()
//                            .background(Color.gray.opacity(0.1))
//                            .cornerRadius(8)
//                            .autocapitalization(.none)
//                    }
//                    
//                    // –ü–æ–ª–µ "Email"
//                    VStack(alignment: .leading, spacing: 5) {
//                        Text("Email")
//                            .font(.subheadline)
//                            .foregroundColor(AppColors.primary)
//                        TextField("–í–≤–µ–¥–∏—Ç–µ email", text: $email)
//                            .submitLabel(.next)
//                            .focused($isFieldFocus, equals: .emailField)
//                            .onSubmit { focusNextField() }
//                            .padding()
//                            .background(Color.gray.opacity(0.1))
//                            .cornerRadius(8)
//                            .keyboardType(.emailAddress)
//                            .autocapitalization(.none)
//                    }
//                    
//                    // –ü–æ–ª–µ "–ü–∞—Ä–æ–ª—å" —Å –∫–Ω–æ–ø–∫–æ–π "eye" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
//                    VStack(alignment: .leading, spacing: 5) {
//                        Text("–ü–∞—Ä–æ–ª—å")
//                            .font(.subheadline)
//                            .foregroundColor(AppColors.primary)
//                        HStack {
//                            Group {
//                                if isPasswordVisible {
//                                    TextField("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", text: $password)
//                                        .submitLabel(.done)
//                                        .focused($isFieldFocus, equals: .passwordField)
//                                        .textContentType(.password)
//                                        .onSubmit { focusNextField() }
//                                } else {
//                                    SecureField("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", text: $password)
//                                        .submitLabel(.done)
//                                        .focused($isFieldFocus, equals: .securePasswordField)
//                                        .textContentType(.password)
//                                        .onSubmit { focusNextField() }
//                                }
//                            }
//                            // –ö–Ω–æ–ø–∫–∞-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
//                            Button(action: {
//                                isPasswordVisible.toggle()
//                                isFieldFocus = isPasswordVisible ? .passwordField : .securePasswordField
//                            }) {
//                                Image(systemName: isPasswordVisible ? "eye.slash" : "eye")
//                                    .foregroundColor(.gray)
//                            }
//                        }
//                        .padding()
//                        .background(Color.gray.opacity(0.1))
//                        .cornerRadius(8)
//                    }  // End of password field
//                }
//                .padding(.horizontal)
//                .padding(.top, 20)
//                
//                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                Button(action: {
//                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//                }, label: {
//                    Text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
//                        .fontWeight(.semibold)
//                        .frame(maxWidth: .infinity)
//                        .padding()
//                        .background(AppColors.activeColor)
//                        .foregroundColor(AppColors.primary)
//                        .cornerRadius(8)
//                })
//                .padding(.horizontal)
//                
//                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤—Ö–æ–¥–∞
//                HStack {
//                    VStack { Divider().frame(height: 1).background(Color.primary) }
//                    Text("–ò–õ–ò")
//                        .font(.footnote)
//                        .foregroundColor(.primary)
//                    VStack { Divider().frame(height: 1).background(Color.primary) }
//                }
//                .padding([.horizontal, .vertical])
//                
//                // –ë–ª–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                HStack(spacing: 40) {
//                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Apple
//                    Button(action: {
//                        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Apple
//                    }) {
//                        Image(systemName: "applelogo")
//                            .resizable()
//                            .scaledToFit()
//                            .frame(width: UIScreen.main.bounds.width * 0.08, height: UIScreen.main.bounds.width * 0.08)
//                            .padding()
//                            .tint(AppColors.primary)
//                            .clipShape(Circle())
//                            .overlay(Circle().stroke(Color.gray, lineWidth: 1))
//                    }
//                    
//                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
//                    Button(action: {
//                        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google
//                    }) {
//                        Image("googlelogo")
//                            .resizable()
//                            .scaledToFit()
//                            .frame(width: UIScreen.main.bounds.width * 0.08, height: UIScreen.main.bounds.width * 0.08)
//                            .padding()
//                            .clipShape(Circle())
//                            .overlay(Circle().stroke(Color.gray, lineWidth: 1))
//                    }
//                }
//                .padding(.vertical, 10)
//                
//                // –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞
//                HStack {
//                    Text("–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?")
//                    Button(action: {
//                        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
//                    }) {
//                        Text("–í–æ–π—Ç–∏")
//                            .foregroundColor(.blue)
//                            .fontWeight(.semibold)
//                    }
//                }
//                .padding(.bottom, 20)
//            }
//            .navigationBarTitleDisplayMode(.inline)
//            .navigationTitle("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
//        }
////        .ignoresSafeArea(.keyboard)
//    }
//    
//    private func focusNextField() {
//        switch isFieldFocus {
//        case .nameField:
//            isFieldFocus = .emailField
//        case .emailField:
//            isFieldFocus = isPasswordVisible ? .passwordField : .securePasswordField
//        case .securePasswordField, .passwordField:
//            isFieldFocus = nil
//        default:
//            isFieldFocus = nil
//        }
//    }
//}


// MARK: - Code

//VStack(spacing: 20).frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .top)

//struct CreateAccountView_Previews: PreviewProvider {
//    static var previews: some View {
//        Group {
//            CreateAccountView()
//                .previewDevice("iPhone 15 Pro")
//            CreateAccountView()
//                .previewDevice("iPhone SE 3rd generation")
//        }
//    }
//}

//var body: some View {
//    // GeometryReader –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
////        GeometryReader { geometry in
//        // ScrollView –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–µ–∑–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö
////            ScrollView {
//            VStack(spacing: 20) {
//                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–∫—Ä–∞–Ω–∞
//                Text("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
//                    .font(.largeTitle)
//                    .fontWeight(.bold)
//                    .padding(.top, 20)
//                
//                // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                VStack(spacing: 15) {
//                    TextField("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", text: $username)
//                        .padding()
//                        .background(Color.gray.opacity(0.1))
//                        .cornerRadius(8)
//                        .autocapitalization(.none)
//                    
//                    TextField("Email", text: $email)
//                        .padding()
//                        .background(Color.gray.opacity(0.1))
//                        .cornerRadius(8)
//                        .keyboardType(.emailAddress)
//                        .autocapitalization(.none)
//                    
//                    SecureField("–ü–∞—Ä–æ–ª—å", text: $password)
//                        .padding()
//                        .background(Color.gray.opacity(0.1))
//                        .cornerRadius(8)
//                }
//                .padding(.horizontal)
//                
//                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                Button(action: {
//                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//                }, label: {
//                    Text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
//                        .fontWeight(.semibold)
//                        .frame(maxWidth: .infinity)
//                        .padding()
//                        .background(Color.pink)
//                        .foregroundColor(.white)
//                        .cornerRadius(8)
//                })
//                .padding(.horizontal)
//                
//                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤—Ö–æ–¥–∞
//                HStack {
//                    VStack { Divider().frame(height: 1).background(Color.primary) }
//                    Text("–ò–õ–ò")
//                        .font(.footnote)
//                        .foregroundColor(.primary)
//                    VStack { Divider().frame(height: 1).background(Color.primary) }
//                }
//                .padding([.horizontal, .vertical])
//                
//                // –ë–ª–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
//                HStack(spacing: 40) {
//                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Apple
//                    Button(action: {
//                        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Apple
//                    }) {
//                        Image(systemName: "applelogo")
//                            .resizable()
//                            .scaledToFit()
//                            .frame(width: 30, height: 30)
//                            .padding()
//                            .tint(AppColors.primary)
//                            .clipShape(Circle())
//                            .overlay(
//                                Circle().stroke(Color.gray, lineWidth: 1)
//                            )
//                    }
//                    
//                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
//                    Button(action: {
//                        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google
//                    }) {
//                        // –°–æ–∑–¥–∞–π—Ç–µ –≤ Assets –∏–∫–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "google" –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
//                        Image("googlelogo")
//                            .resizable()
//                            .scaledToFit()
//                            .frame(width: 30, height: 30)
//                            .padding()
//                            .clipShape(Circle())
//                            .overlay(
//                                Circle().stroke(Color.gray, lineWidth: 1)
//                            )
//                    }
//                }
//                .padding(.vertical, 10)
//                
//                // –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
//                HStack {
//                    Text("–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?")
//                    Button(action: {
//                        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
//                    }) {
//                        Text("–í–æ–π—Ç–∏")
//                            .foregroundColor(.blue)
//                            .fontWeight(.semibold)
//                    }
//                }
//                .padding(.bottom, 20)
//            }
//            // –ó–∞—Å—Ç–∞–≤–ª—è–µ–º VStack –∑–∞–Ω–∏–º–∞—Ç—å –≤—Å—é —à–∏—Ä–∏–Ω—É
////                .frame(minWidth: 0, maxWidth: .infinity)
////            }
//        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É ScrollView —Ä–∞–≤–Ω–æ–π —ç–∫—Ä–∞–Ω—É
////            .frame(width: geometry.size.width)
////        }
//}
