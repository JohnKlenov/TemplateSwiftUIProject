//
//  AppColors.swift
//  TemplateSwiftUIProject
//
//  Created by Evgenyi on 1.11.24.
//

//Эти цвета автоматически адаптируются под светлую и тёмную тему, так как они зависят от системного поведения (они определены в UIKit как динамические).

//.foregroundColor(.red) - Задает цвет содержимого, например, текста или изображений.

//.background(Color.blue)  - Устанавливает фоновое представление. Если передать Color, то получится цветной фон.

//.foregroundStyle был введён в SwiftUI (начиная с iOS 15) как более гибкая альтернатива классическому .foregroundColor. Его задача – задать стиль для содержимого представления.

///.foregroundStyle был введён в SwiftUI (начиная с iOS 15) как более гибкая альтернатива классическому .foregroundColor. Его задача – задать стиль для содержимого представления (например, для текста, форм, изображений), и он принимает параметры, соответствующие протоколу ShapeStyle. Это означает, что вместо того чтобы ограничиваться одним цветом, вы можете использовать:
///Простые цвета (например, Color.blue, Color.red) + Градиенты (например, LinearGradient, RadialGradient, AngularGradient) + Материалы (например, Material.ultraThinMaterial и т.п.) + Или даже комбинированные стили, если потребуется создать специальный визуальный эффект.
///Любой тип, удовлетворяющий протоколу ShapeStyle, можно передать в .foregroundStyle.
///Это делает его универсальным инструментом для стилизации множества компонентов SwiftUI, таких как Text, Image, Shape и многие другие.
///.foregroundStyle(LinearGradient(gradient: Gradient(colors: [.red, .orange, .yellow]),startPoint: .leading,endPoint: .trailing))
///.foregroundStyle(Material.ultraThinMaterial)
///Material.ultraThinMaterial — это один из встроенных системных материалов, представленных в SwiftUI (начиная с iOS 15), который предназначен для создания эффектов размытия и прозрачности, напоминающих «фростед-гласс» (frosted glass). Матовое стекло.
///Эффект размытия: ultraThinMaterial создает мягкий, едва заметный размытый эффект, позволяющий видеть часть содержимого, расположенного позади. Это как будто тонкая вуаль, которая слегка затемняет фон, позволяя элементам переднего плана выделяться.
///Модификатор можно применять не только к тексту, но и к любым другим представлениям, поддерживающим стиль. Это позволяет создавать гармоничный и единообразный интерфейс, где, например, иконки, формы и прочие элементы получают заданный стиль.
///Применяйте его, чтобы добиться единообразного стиля на множестве компонентов и, если это необходимо, адаптировать интерфейс под светлую и тёмную тему, используя динамические стили или материалы.

//.accentColor(.green) - Задает акцентный цвет для вложенных элементов, поддерживающих акцент (например, кнопок, переключателей).

///.accentColor — это модификатор, который был представлен с появлением SwiftUI в iOS 13. Он устанавливает цвет, который будет использоваться для выделения интерактивных элементов в пределах данного представления или его поддерева. Это могут быть кнопки, ссылки, переключатели и другие элементы, которые по умолчанию используют акцентный цвет.
///При применении .accentColor(.green) внутри контейнера, все дочерние элементы, поддерживающие акцентный цвет, автоматически «наследуют» этот цвет.
///Обычно этот цвет влияет на подсветку или выделение состояний элементов (например, цвет рамки выделенной ячейки или цвет заливки переключателя).
///VStack { Button("Нажми меня") { }    Toggle("Переключить", isOn: .constant(true)) }.accentColor(.green)
///В этом примере кнопка и переключатель получат зеленую подсветку.
///Достаточно универсальна для большинства базовых случаев и служит в качестве глобального определения для акцентного цвета в приложении.

// .tint(.orange) - Tint (iOS 15+) Задает основной цвет для элементов управления внутри представлений,например, для NavigationView или List.

///По задумке Apple, .tint постепенно занимает место .accentColor, особенно когда речь идет о настройке цветов в контейнерах, таких как NavigationView, TabView и прочих, где требуется единообразно задавать цвет для кнопок, стрелок, иконок и прочего.
///Применяя .tint(.orange) к контейнеру, вы устанавливаете основной цвет для интерактивных элементов внутри него.
///Модификатор .tint использует системные механизмы наложения «tint» цвета, что позволяет дополнительно контролировать вид элементов на уровне системных компонентов UIKit, когда SwiftUI их отображает.
///if #available(iOS 15.0, *) { NavigationView { List { Text("Элемент 1") Text("Элемент 2") } .navigationTitle("Пример .tint") } .tint(.orange) }
///В этом примере все элементы управления внутри NavigationView (например, стрелки назад, кнопки) будут окрашены в оранжевый цвет.
///Может применяться более широко, чем .accentColor, и зачастую наследуется системой UI Kit, что помогает добиться единообразного стиля по всему приложению.

///Историческая совместимость: Если приложение нацелено на iOS 13–14, то .accentColor остаётся стандартом. Если ориентируетесь на iOS 15 и выше, можно использовать .tint для большей гибкости.
///Наследование в иерархии: Оба модификатора наследуются вниз по вью-иерархии, но в некоторых сценариях система может отдавать предпочтение .tint. Поэтому стоит придерживаться одного подхода в рамках одного контейнера для избежания конфликтов.
///Современные рекомендации: Apple постепенно переводит интерфейс на использование .tint. Если вы начинаете новый проект или обновляете существующий, имеет смысл попробовать использовать .tint там, где это возможно, чтобы воспользоваться преимуществами новых системных стандартов.

//.border(Color.gray, width: 2) - Добавляет рамку к вью с указанным цветом и толщиной.

//.shadow(color: Color.black.opacity(0.5), radius: 4, x: 0, y: 2) - Применяет тень к вью с заданным цветом, радиусом размытия и смещением по осям.


// .listRowBackground(Color.yellow) - Устанавливает фон для отдельной строки в List.


import SwiftUI
import UIKit

struct AppColors {
    static let primary = Color(.label) // Основной цвет текста
    static let secondary = Color(.secondaryLabel) // Второстепенный цвет текста
    static let background = Color(.systemBackground) // Основной цвет фона
    static let secondarySystemBackground = Color(.secondarySystemBackground) // Второстепенный цвет фона
    static let systemGroupedBackground = Color(.systemGroupedBackground)
    static let activeColor = Color(UIColor.systemPurple)
    static let orange = Color(.systemOrange)
    static let red = Color(.systemRed)
    static let clear = Color(.clear)
    static let gray = Color(.systemGray)
    static let blue = Color(.systemBlue)
    static let pink = Color(.systemPink)
    static let black = Color(.black)
    }
