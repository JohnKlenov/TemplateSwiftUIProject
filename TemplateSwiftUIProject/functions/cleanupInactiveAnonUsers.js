const functions = require('firebase-functions');
const admin = require('firebase-admin');

const db = admin.firestore();

/**
 * PROD: –û—á–∏—Å—Ç–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 30 –¥–Ω–µ–π
 */
exports.cleanupInactiveAnonUsers = functions.pubsub
  .schedule('every 24 hours')
  .onRun(async () => {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 30);
    const cutoff = admin.firestore.Timestamp.fromDate(cutoffDate);

    console.log(`üßπ [PROD] –ò—â–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ ${cutoff.toDate().toISOString()}`);

    const snapshot = await db.collectionGroup('anonAccountTracker')
      .where('isAnonymous', '==', true)
      .where('lastActiveAt', '<', cutoff)
      .get();

    if (snapshot.empty) {
      console.log('‚ÑπÔ∏è [PROD] –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return null;
    }

    const tasks = [];
    snapshot.forEach((doc) => {
      const uid = doc.id;
      tasks.push(handleCandidateUser(uid, doc.ref, '[PROD]'));
    });

    await Promise.all(tasks);
    console.log(`‚úÖ [PROD] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tasks.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`);
    return null;
  });

async function handleCandidateUser(uid, trackerRef, tag) {
  try {
    const userRecord = await admin.auth().getUser(uid);
    const isStillAnonymous = userRecord.providerData.length === 0;

    if (!isStillAnonymous) {
      console.log(`‚è≠Ô∏è ${tag} –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${uid}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π`);
      await trackerRef.update({ isAnonymous: false });
      return;
    }

    await admin.auth().deleteUser(uid);
    console.log(`‚úÖ ${tag} –£–¥–∞–ª—ë–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid}`);
  } catch (err) {
    if (err.code === 'auth/user-not-found') {
      console.log(`‚ÑπÔ∏è ${tag} ${uid} —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–∑ Auth`);
      await trackerRef.update({ isAnonymous: false });
      return;
    }
    console.error(`‚ùå ${tag} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${uid}:`, err);
  }
}


