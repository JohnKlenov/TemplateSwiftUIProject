const functions = require('firebase-functions');
const admin = require('firebase-admin');

const db = admin.firestore();

/**
 * TEST: –û—á–∏—Å—Ç–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 1 –¥–Ω—è
 */
exports.cleanupInactiveAnonUsersTest = functions.pubsub
  .schedule('every 24 hours')
  .onRun(async () => {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 1);
    const cutoff = admin.firestore.Timestamp.fromDate(cutoffDate);

    console.log(`üß™ [TEST] –ò—â–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ ${cutoff.toDate().toISOString()}`);

// üîé –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    try {
      const snapshot = await db.collectionGroup('anonAccountTracker').limit(1).get();
      console.log('Docs found (test):', snapshot.size);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ:', e);
      return null; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–∞–¥–∞–µ—Ç
    }

// üîé –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤ –ø–æ–ª—è lastActiveAt
const testSnap2 = await db.collectionGroup('anonAccountTracker').limit(10).get();
testSnap2.forEach((doc) => {
  const data = doc.data();
  let type = 'undefined';
  if (data.lastActiveAt instanceof admin.firestore.Timestamp) {
    type = 'Timestamp';
  } else if (data.lastActiveAt !== undefined) {
    type = typeof data.lastActiveAt;
  }
  console.log(doc.id, 'lastActiveAt:', data.lastActiveAt, 'type:', type);
});


    // üîé –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤ –ø–æ–ª—è isAnonymous
    const testSnap = await db.collectionGroup('anonAccountTracker').limit(10).get();
    testSnap.forEach((doc) => {
      const data = doc.data();
      console.log(doc.id, 'isAnonymous:', data.isAnonymous, 'type:', typeof data.isAnonymous);
    });

    const snapshot = await db.collectionGroup('anonAccountTracker')
      .where('isAnonymous', '==', true)
.where('lastActiveAt', '<', cutoff)
      .get();

    if (snapshot.empty) {
      console.log('‚ÑπÔ∏è [TEST] –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return null;
    }

    const tasks = [];
    snapshot.forEach((doc) => {
      const uid = doc.id;
      tasks.push(handleCandidateUser(uid, doc.ref, '[TEST]'));
    });

    await Promise.all(tasks);
    console.log(`‚úÖ [TEST] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tasks.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`);
    return null;
  });

async function handleCandidateUser(uid, trackerRef, tag) {
  try {
    const userRecord = await admin.auth().getUser(uid);
    const isStillAnonymous = userRecord.providerData.length === 0;

    if (!isStillAnonymous) {
      console.log(`‚è≠Ô∏è ${tag} –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${uid}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä, —á—Ç–æ–±—ã –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ø–∞–¥–∞–ª –≤ –≤—ã–±–æ—Ä–∫—É
      await trackerRef.update({ isAnonymous: false });
      return;
    }

    await admin.auth().deleteUser(uid);
    console.log(`‚úÖ ${tag} –£–¥–∞–ª—ë–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid}`);
  } catch (err) {
    if (err.code === 'auth/user-not-found') {
      console.log(`‚ÑπÔ∏è ${tag} ${uid} —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–∑ Auth`);
      await trackerRef.update({ isAnonymous: false });
      return;
    }
    console.error(`‚ùå ${tag} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${uid}:`, err);
  }
}


