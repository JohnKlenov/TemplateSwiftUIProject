/**
 * Cloud Function: cleanupUnusedAvatars
 *
 * üßπ –ó–∞–¥–∞—á–∞:
 *   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É–±–æ—Ä–∫–∞ ¬´—Å–∏—Ä–æ—Ç—Å–∫–∏—Ö¬ª –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ Firebase Storage, –∫–æ—Ç–æ—Ä—ã–µ
 *   –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 *
 * üîÑ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
 * 1. –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 03:00).
 * 2. –ò–∑ Firestore —á–µ—Ä–µ–∑ collectionGroup("userProfileData") –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Ñ–∏–ª–µ–π.
 *    - –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: users/{uid}/userProfileData/{uid}.
 *    - –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ—Ä—ë—Ç—Å—è –ø–æ–ª–µ photoURL (—Ç–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∞–≤–∞—Ç–∞—Ä).
 * 3. –ò–∑ photoURL –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, avatar_1693648123.jpg).
 * 4. –í Storage –ª–∏—Å—Ç—è—Ç—Å—è –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç–∏ avatars/{uid}/.
 * 5. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (updated/timeCreated).
 * 6. –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ).
 * 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ¬´–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å¬ª (keep).
 * 8. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.
 * 9. –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ Storage.
 *
 * ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
 *   - GRACE_DAYS: —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å ¬´—Å–≤–µ–∂–∏–µ¬ª —Ñ–∞–π–ª—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7).
 *   - KEEP_RECENT: —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ—Ä—Ö —Ç–µ–∫—É—â–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2).
 *   - PROFILE_COLLECTION_GROUP: –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π (userProfileData).
 *
 * üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫:
 *   - –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç photoURL ‚Üí –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ¬´—Ç–µ–∫—É—â–∏–π¬ª —Ñ–∞–π–ª –≤ keep.
 *   - –ï—Å–ª–∏ –≤ Storage –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ –ø—É—Ç–∏ avatars/{uid}/ ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 *   - –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ userProfileData ‚Üí —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.
 *   - –û—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
 */

const functions = require('firebase-functions');
const admin = require('firebase-admin');

const db = admin.firestore();
const storage = admin.storage().bucket(process.env.FIREBASE_STORAGE_BUCKET);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const GRACE_DAYS = parseInt(process.env.AVATAR_GRACE_DAYS || '7', 10);
const KEEP_RECENT = parseInt(process.env.AVATAR_KEEP_RECENT || '2', 10);
const PROFILE_COLLECTION_GROUP = 'userProfileData';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
function extractFileNameFromUrl(url) {
  try {
    const u = new URL(url);
    const decodedPath = decodeURIComponent(
      u.pathname.replace(/^\/v0\/b\/[^/]+\/o\//, '')
    );
    const parts = decodedPath.split('/');
    return parts[parts.length - 1];
  } catch {
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ (v1 API)
const cleanupUnusedAvatars = functions.pubsub
  .schedule('every monday 03:00')
  .onRun(async () => {
    const now = Date.now();
    const graceMs = GRACE_DAYS * 24 * 60 * 60 * 1000;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const profilesSnap = await db.collectionGroup(PROFILE_COLLECTION_GROUP).get();

    for (const doc of profilesSnap.docs) {
      const data = doc.data();
      const uid = doc.id;
      const photoURL = data.photoURL || null;
      const usedFileName = photoURL ? extractFileNameFromUrl(photoURL) : null;

      // –ü–∞–ø–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const prefix = `avatars/${uid}/`;

      const [files] = await storage.getFiles({ prefix });
      if (!files.length) continue;

      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const withMeta = await Promise.all(
        files.map(async (file) => {
          const [meta] = await file.getMetadata();
          const updated = new Date(meta.updated || meta.timeCreated || Date.now()).getTime();
          const name = file.name.replace(prefix, '');
          return { file, name, updated };
        })
      );

      withMeta.sort((a, b) => b.updated - a.updated);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ "–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å"
      const keep = new Set();
      if (usedFileName) keep.add(usedFileName);

      for (const { name } of withMeta) {
        if (keep.size >= (usedFileName ? 1 + KEEP_RECENT : KEEP_RECENT)) break;
        if (!keep.has(name)) keep.add(name);
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      const toDelete = withMeta.filter(({ name, updated }) => {
        const isOld = now - updated > graceMs;
        return isOld && !keep.has(name);
      });

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
      for (const item of toDelete) {
        try {
          await item.file.delete();
          console.log(`Deleted ${item.file.name}`);
        } catch (e) {
          console.warn(`Failed to delete ${item.file.name}:`, e);
        }
      }
    }
  });

module.exports = { cleanupUnusedAvatars };
