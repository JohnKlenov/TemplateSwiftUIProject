//
//  OrientationInfo.swift
//  TemplateSwiftUIProject
//
//  Created by Evgenyi on 25.05.25.



// MARK: - Setting

//var isRotationLocked
///let supportedOrientations = UIApplication.shared.supportedInterfaceOrientations(for: nil) - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
///–ß–µ–º —ç—Ç–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è? - Info.plist (UISupportedInterfaceOrientations), AppDelegate (application(_:supportedInterfaceOrientationsFor:)), UIViewController.supportedInterfaceOrientations (–≤ —Ç–µ–∫—É—â–µ–º VC)
///supportedOrientations ‚Üí —ç—Ç–æ –º–∞—Å–∫–∞ (UIInterfaceOrientationMask), —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (.portrait, .landscapeLeft, .landscapeRight –∏ —Ç. –¥.).
///return supportedOrientations == .portrait || supportedOrientations.isSubset(of: .portrait) - –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–≤–æ—Ä–æ—Ç
///–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é.
///–µ—Å–ª–∏ –≤ Info.plist –∑–∞–ø–∏—Å–∞–Ω–æ —Ç–æ–ª—å–∫–æ .portrait, —Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.
///supportedOrientations.isSubset(of: .portrait) - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–∞—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–π–º–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –∫—Ä–æ–º–µ .portrait –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.
///–ï—Å–ª–∏ –≤ supportedOrientations –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ .portrait ‚Üí isSubset(of: .portrait) == true. ‚ùå –ï—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å –∏ .portrait, –∏ .landscapeLeft ‚Üí isSubset(of: .portrait) == false.
///–†–µ–∑—É–ª—å—Ç–∞—Ç: –ï—Å–ª–∏ –≤ supportedOrientations –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—Ä–µ—Ç ‚Äî isRotationLocked == true. –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–µ —Ä–µ–∂–∏–º—ã ‚Äî isRotationLocked == false.
///–≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —ç–∫—Ä–∞–Ω –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –±—É–¥–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –≤ .landscape, –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å UI.
///
///–ü–æ—á–µ–º—É –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ supportedOrientations == .portrait?
///isRotationLocked —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–º –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤!
///supportedOrientations == .portrait // `true`, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –ø–æ—Ä—Ç—Ä–µ—Ç! –ù–æ –µ—Å–ª–∏ supportedOrientations —Å–æ–¥–µ—Ä–∂–∏—Ç –µ—â—ë –∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä–Ω—ë—Ç false, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.
///supportedOrientations.isSubset(of: .portrait) // `true`, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¢–û–õ–¨–ö–û –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∂–∏–º—ã
///–≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ supportedOrientations –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π –∫—Ä–æ–º–µ .portrait.
///–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –º–∞—Å–∫–∞ –¢–û–õ–¨–ö–û .portrait, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ Info.plist —è–≤–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã .portrait, .portraitUpsideDown (—á—Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π).
///–ü–µ—Ä–≤–∞—è (== .portrait) –ª–æ–≤–∏—Ç —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç: —á–∏—Å—Ç—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –±–µ–∑ –¥—Ä—É–≥–∏—Ö –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π. üîπ –í—Ç–æ—Ä–∞—è (isSubset(of: .portrait)) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ –º–∞—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤.
///–û–ø–µ—Ä–∞—Ç–æ—Ä || (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò) –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ –ª—é–±–∞—è –∏–∑ –¥–≤—É—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–µ—Ä–Ω—ë—Ç true, –≤—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ç–æ–∂–µ –±—É–¥–µ—Ç true.
///—Ç–æ –µ—Å—Ç—å –µ—Å–ª–∏ –±—ã –º—ã –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ supportedOrientations == .portrait –∏ –≤ supportedOrientations –±—ã–ª–æ –±—ã (.portrait, .portraitUpsideDown) —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –±—ã false –Ω–æ –æ–Ω –±—ã –Ω–∞–º –ø–æ–¥–æ—à–µ–ª!

import SwiftUI
import UIKit
import Combine


class DeviceOrientationService: ObservableObject {
    enum Orientation {
        case portrait
        case landscape
    }
    
    @Published private(set) var orientation: Orientation = .portrait
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        updateOrientation()
        
        NotificationCenter.default.publisher(for: UIDevice.orientationDidChangeNotification)
            .sink { [weak self] _ in
                self?.updateOrientation()
            }
            .store(in: &cancellables)
    }
    
    private func updateOrientation() {
        let newOrientation: Orientation
        
        if isRotationLocked {
            newOrientation = .portrait
        } else {
            let deviceOrientation = UIDevice.current.orientation
            
            switch deviceOrientation {
            case .portrait, .portraitUpsideDown:
                newOrientation = .portrait
            case .landscapeLeft, .landscapeRight:
                newOrientation = .landscape
            default:
                // –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è interfaceOrientation
                newOrientation = currentInterfaceOrientation?.isLandscape ?? false ? .landscape : .portrait
            }
        }
        
        DispatchQueue.main.async { [weak self] in
            self?.orientation = newOrientation
        }
    }
    
    private var currentInterfaceOrientation: UIInterfaceOrientation? {
        if #available(iOS 15.0, *) {
            return UIApplication.shared.connectedScenes
                .compactMap { $0 as? UIWindowScene }
                .first?
                .interfaceOrientation
        } else {
            return UIApplication.shared.windows.first?.windowScene?.interfaceOrientation
        }
    }
    
    private var isRotationLocked: Bool {
        let supportedOrientations = UIApplication.shared.supportedInterfaceOrientations(for: nil)
        return supportedOrientations == .portrait || supportedOrientations.isSubset(of: .portrait)
    }
    
    deinit {
        cancellables.forEach { $0.cancel() }
    }
}

extension UIInterfaceOrientation {
    var isLandscape: Bool {
        return self == .landscapeLeft || self == .landscapeRight
    }
}
