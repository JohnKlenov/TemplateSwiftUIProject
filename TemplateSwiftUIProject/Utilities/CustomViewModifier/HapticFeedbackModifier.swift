//
//  HapticFeedbackModifier.swift
//  TemplateSwiftUIProject
//
//  Created by Evgenyi on 9.05.25.
//


///SwiftUI пока не предоставляет собственного нативного API для тактильной обратной связи, аналогичного классам из UIKit (таким как UIImpactFeedbackGenerator, UINotificationFeedbackGenerator или UISelectionFeedbackGenerator). Но поскольку SwiftUI — это фреймворк, работающий поверх iOS SDK, вы можете спокойно импортировать UIKit и использовать эти классы внутри SwiftUI-приложения.

//Тактильная вибрация (haptic feedback) — это технология, позволяющая устройствам отдавать пользователю физический отклик через вибрацию или тактильные ощущения. В iOS для этого используются специальные классы, предоставляемые Apple. Основные из них:

//UIImpactFeedbackGenerator
///Назначение: Используется для имитации физического удара или столкновения. Он создает короткий тактильный эффект, который напоминает лёгкий удар или столкновение объектов. Применяется для ситуаций, когда пользователь выполняет действие, требующее имитации «физического» взаимодействия, например, перетаскивание элементов, прокрутка или столкновение с препятствиями.
///.light .medium .heavy (с iOS 13 и выше: .soft, .rigid)
///Использование: Перед вызовом эффекта рекомендуется вызвать метод prepare(), чтобы минимизировать задержку при фактическом срабатывании. Пример:
///let impactGenerator = UIImpactFeedbackGenerator(style: .medium) impactGenerator.prepare() impactGenerator.impactOccurred()
///Используй UIImpactFeedbackGenerator, если: Тебе нужно симулировать физическое столкновение или удар, когда происходит какое-то действие, требующее «массового» эффекта. Он полезен для нажатий на кнопки или перетаскивания элементов, чтобы придать ощущение «реальной» физической реакции.

//UINotificationFeedbackGenerator
///Назначение: Предназначен для отображения тактильного отклика при завершении какого-либо процесса или уведомления пользователя о статусе операции. Он ассоциирован с тремя типами уведомлений:
///.success .warning .error Каждый тип генерирует уникальный вибрационный паттерн, который интуитивно воспринимается как положительный результат, предупредительный сигнал или сигнал о неудаче.
///Использование: Так же, как и с UIImpactFeedbackGenerator, перед вызовом рекомендуется вызвать prepare() для минимизации задержки
///Сценарии применения:
///После завершения загрузки или сохранения данных, когда операция завершилась успешно.
///При возникновении ошибки или сбоя, чтобы пользователь почувствовал «ошибку» через тактильное уведомление.
///Если операция требует подтверждения (например, перед удалением данных) — можно использовать эффект предупреждения.
///Используй UINotificationFeedbackGenerator, если: Тебе необходимо уведомить пользователя об окончательном результате операции. Например, если действие завершилось успешно, вызови .success, если возникло предупреждение — .warning, а в случае ошибки — .error. Это помогает интуитивно понять, как прошло выполнение операции.

//UISelectionFeedbackGenerator
///Назначение: UISelectionFeedbackGenerator предназначен для передачи тонкой, ненавязчивой тактильной информации именно при изменении выбора. Его используют, когда пользователь перемещается между элементами списка, секциями или другими вариантами, где важно передать сигнал о том, что выбор изменился.
///Выдает очень мягкий и кратковременный тактильный отклик, как «щелчок».
///Подходит для, например, переключения между вкладками, перемещения фокусированной ячейки или прокрутки колесика выбора.
///Как правило, его вызывают, когда значение выбора меняется, но не происходит какое-то «физическое столкновение» или уведомление об итоговом результате.
///Сценарии применения:
///Переключение между элементами в горизонтальном или вертикальном списке.
///Изменение значения в интерфейсе типа picker (например, выбор даты или времени).
///Обновление выделенного элемента в таблице или коллекции.


import SwiftUI
import UIKit

struct HapticFeedbackModifier: ViewModifier {
    var type: UINotificationFeedbackGenerator.FeedbackType

    func body(content: Content) -> some View {
        content.onAppear {
            let generator = UINotificationFeedbackGenerator()
            generator.prepare()
            generator.notificationOccurred(type)
        }
    }
}

extension View {
    func hapticFeedback(_ type: UINotificationFeedbackGenerator.FeedbackType) -> some View {
        self.modifier(HapticFeedbackModifier(type: type))
    }
}

// Пример использования в SwiftUI-компоненте:
struct ExampleView: View {
    var body: some View {
        Text("Нажми меня!")
            .padding()
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
            .hapticFeedback(.success)
    }
}

