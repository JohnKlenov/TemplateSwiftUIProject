//
//  UIFont+DynamicTypeMetrics.swift
//  TemplateSwiftUIProject
//
//  Created by Evgenyi on 1.04.25.
//

import UIKit

///По умолчанию Dynamic Type в iOS включён, и если вы используете стандартные текстовые стили (например, .body, .headline, .caption и т.д.) в SwiftUI или UIKit, то система автоматически масштабирует шрифты в зависимости от предпочтений пользователя.
///.font(.headline) - приложение будет автоматически масштабировать шрифт, если пользователь изменил размер шрифта в настройках устройства.
///Для кастомных шрифтов: Если вы используете .system(size: ...) или свой собственный шрифт с фиксированным размером, Dynamic Type работать не будет автоматически. Для того чтобы включить масштабирование для таких шрифтов, можно использовать UIFontMetrics (в UIKit) или модификаторы в SwiftUI.
///Адаптация через Environment: SwiftUI по умолчанию учитывает пользовательский размер шрифта, поэтому если вы не будете специально его переопределять, Dynamic Type будет работать.
///.font(.system(size: 16)) - то шрифт не будет масштабироваться (если не указано дополнительно модификатор для масштабирования). То есть, если вам нужно зафиксировать размер независимо от настроек пользователя – используйте фиксированные размеры.
///Переопределение через Environment: Можно задать ограничение для дочерних вью, используя модификатор .environment(\.dynamicTypeSize, .medium) (или другое конкретное значение), чтобы установить фиксированный размер Dynamic Type для этой части интерфейса.
///В UIKit: Для элементов (UILabel, UITextView и т.д.) можно установить adjustsFontForContentSizeCategory = false, чтобы отключить автоматическое масштабирование шрифтов.
///Чтобы не работать Dynamic Type: Используйте фиксированные размеры шрифтов (например, .system(size: 16)) или переопределите значение в environment посредством .environment(\.dynamicTypeSize, <фиксированное значение>).


// MARK: - Расширение для получения lineHeight с Dynamic Type

extension UIFont {
    static func lineHeight(for textStyle: UIFont.TextStyle) -> CGFloat {
        return UIFont.preferredFont(forTextStyle: textStyle).lineHeight
    }
}

